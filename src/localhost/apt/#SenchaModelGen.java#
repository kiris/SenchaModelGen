package localhost.apt;

import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.Date;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.TypeKind;
import javax.lang.model.util.ElementFilter;
import javax.tools.Diagnostic.Kind;

import localhost.annotation.Field;
import localhost.annotation.Model;

@SupportedSourceVersion(SourceVersion.RELEASE_6)
@SupportedAnnotationTypes("localhost.annotation.Model")
public class SenchaModelGen extends AbstractProcessor {
    @Override
    public boolean process(Set<? extends TypeElement> annotations,
            RoundEnvironment roundEnv) {
        for (TypeElement annotation : annotations) {
            for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {
                assert element instanceof TypeElement;
                TypeElement typeElement = (TypeElement) element;

                try {
                    Model model = element.getAnnotation(Model.class);
                    ModelGenerator generator = new ModelGenerator(this.processingEnv, model, typeElement);

                    if (generator.isGenerable())  {
                        File dir = new File(generator.getDir());
                        File file = new File(dir, generator.getFileName());

                        dir.mkdirs();

                        PrintWriter writer = new PrintWriter(new FileOutputStream(file));
                        try {
                            this.processingEnv.getMessager().printMessage(Kind.NOTE, this.getClass().getName() + " generate: " + file.getPath());

                            generator.generate(writer);
                        } finally {
                            writer.close();
                        }
                    }
                } catch (Exception e) {
                    this.processingEnv.getMessager().printMessage(Kind.ERROR, e.getMessage(), typeElement);
                }
            }
        }
        return true;
    }

    static private class ModelGenerator {
        private final ProcessingEnvironment processingEnv;
        private final Model model;
        private final TypeElement element;

        public ModelGenerator(ProcessingEnvironment processingEnv, Model model, TypeElement element) {
            this.processingEnv = processingEnv;
            this.model = model;
            this.element = element;
        }

        public boolean isGenerable() {
            if (this.element.getKind() != ElementKind.CLASS) {
                return false;
            }
            if (!this.element.getModifiers().contains(Modifier.PUBLIC)) {
                return false;
            }
            if (this.element.getModifiers().contains(Modifier.ABSTRACT)) {
                return false;
            }
            return true;
        }

        public void generate(PrintWriter writer) {
            this.generateModelHeader(writer, this.model, this.element);

            for (VariableElement fieldElement : ElementFilter.fieldsIn(this.element.getEnclosedElements())) {
                FieldGenerator generator = new FieldGenerator(this.processingEnv, this.model, fieldElement);
                if (generator.isGenerable()) {
                    generator.generate(writer);
                }
            }

            this.generateModelFotter(writer, model, element);
        }

        private void generateModelHeader(PrintWriter writer, Model model, TypeElement element) {
            String namespace = this.getNameSpace();
            String modelName = this.getModelName();
            String absoluteModelName = namespace + (namespace.isEmpty() ? "" : ".") + modelName;

            writer.println("// auto-generated at " + new Date());
            writer.println("");
            writer.println("/**");
            writer.println(" * CAUTION: ");
            writer.println(" *   Don't modify this file!");
            writer.println(" *   This file is automatically generated.");
            writer.println(" */");
            writer.println("Ext.define('" + absoluteModelName + "', {");
            writer.println("    extend: 'Ext.data.Model',");
            writer.println("    config: {");
            writer.println("         fields: [");
        }

        private void generateModelFotter(PrintWriter writer, Model model, TypeElement element) {
            writer.println("         ]");
            writer.println("    }");
            writer.println("});");
        }
        public String getDir() {
            return model.dir();
        }
        public String getFileName() {
            return this.getModelName() + ".js";
        }
        public String getNameSpace() {
            return model.namespace();
        }
        public String getModelName() {
            return model.prefix() + element.getSimpleName().toString();
        }
    }
    static private class FieldGenerator {
        @SuppressWarnings("unused")
        private final ProcessingEnvironment processingEnv;
        @SuppressWarnings("unused")
        private final Model model;
        private final Field field;
        private final VariableElement element;

        public FieldGenerator(ProcessingEnvironment processingEnv, Model model, VariableElement element) {
            this.processingEnv = processingEnv;
            this.model = model;
            this.element = element;
            this.field = element.getAnnotation(Field.class);
        }

        public void generate(PrintWriter writer) {
            String fieldType = getFieldType();
            String fieldName = getFieldName();
            this.generateFieldInternal(writer, fieldName, fieldType);
        }

        private void generateFieldInternal(PrintWriter writer, String fieldName, String fieldType) {
            writer.println("             { name: '" + fieldName + "', type: '" + fieldType + "' },");
        }

        private String getFieldType() {
            if (field != null && !field.type().isEmpty()) {
                return field.type();
            } else {
                TypeKind typeKind = this.element.asType().getKind();
                switch(typeKind) {
                case BOOLEAN:
                    return "boolean";

                case BYTE:
                case SHORT:
                case INT:
                case LONG:
                case CHAR:
                    return "int";

                case FLOAT:
                case DOUBLE:
                    return "float";

                default:
                    return "";
                }
            }
        }

        private String getFieldName() {
            if (field != null && !field.name().isEmpty()) {
                return field.name();
            }
            return element.getSimpleName().toString();
        }

        private boolean isGenerable() {
            if (element.getKind() != ElementKind.FIELD) {
                return false;
            }
            if (element.getModifiers().contains(Modifier.STATIC)) {
                return false;
            }
            if (field != null && field.exclude()) {
                return false;
            }
            return true;
        }

    }
}
